import matplotlib.pyplot as plt
import numpy as np

#FcfsScheduler Test0 Output.out
FcfsT0OUT = """1	0	0	0	83	82	1	83	0	0
3	0	199	215	547	332	0	348	16	16
2	0	168	168	695	184	15	527	328	0
4	0	825	825	929	104	0	104	0	0
5	0	929	929	1160	229	2	231	0	0
6	0	1018	1160	1720	429	7	702	266	142
7	0	1343	1561	1814	123	4	471	344	218
10	0	1952	2102	2160	58	0	208	150	150
14	0	2531	2987	3071	84	0	540	456	456
11	0	2018	2245	3576	903	6	1558	649	227
8	0	1496	1590	4360	303	23	2864	2538	94
9	0	1612	1814	4431	354	8	2819	2457	202
12	0	2374	2728	4578	187	5	2204	2012	354
13	0	2530	2768	5578	519	8	3048	2521	238
19	0	3519	5736	5816	80	0	2297	2217	2217
20	0	3730	5816	5890	74	0	2160	2086	2086
15	0	2692	3576	5932	797	2	3240	2441	884
17	0	3373	5578	6018	158	4	2645	2483	2205
18	0	3406	5681	6041	78	11	2635	2546	2275
16	0	2839	4578	6057	747	31	3218	2440	1739
0	0	0	0	6057	232	0	6057	5825	0"""

#FcfsScheduler Test1 Output.out
FcfsT1OUT = """1	0	0	0	161	161	0	161	0	0
2	0	115	161	425	225	20	310	65	46
5	0	404	425	553	128	0	149	21	21
3	0	268	381	572	41	7	304	256	113
4	0	383	403	610	52	10	227	165	20
6	0	524	610	1215	599	6	691	86	86
7	0	718	1215	1271	56	0	553	497	497
8	0	772	1271	1325	54	0	553	499	499
11	0	1144	1924	1986	62	0	842	780	780
9	0	802	1325	2212	205	3	1410	1202	523
13	0	1609	2212	2304	92	0	695	603	603
14	0	2021	2466	2498	32	0	477	445	445
12	0	1151	1986	2536	229	3	1385	1153	835
16	0	2242	2536	2617	81	0	375	294	294
10	0	849	1529	3065	736	6	2216	1474	680
18	0	2491	3065	3412	347	0	921	574	574
15	0	2200	2498	3693	315	2	1493	1176	298
19	0	2543	3693	3724	31	0	1181	1150	1150
20	0	2574	3724	3872	148	0	1298	1150	1150
17	0	2257	2617	3943	339	3	1686	1344	360
0	0	0	0	3943	10	0	3943	3933	0"""


#FcfsScheduler Test2 Output.out
FcfsT2OUT = """3	0	18	3071	4922	1851	0	4904	3053	3053
4	0	169	4922	7745	2823	0	7576	4753	4753
6	0	200	9750	10678	928	0	10478	9550	9550
9	0	905	12881	16977	4096	0	16072	11976	11976
11	0	1296	18562	19719	1157	0	18423	17266	17266
13	0	1559	20293	23942	3649	0	22383	18734	18734
1	0	0	0	24565	2359	4	24565	22202	0
17	0	2167	24799	27912	3113	0	25745	22632	22632
19	0	2357	28505	29172	667	0	26815	26148	26148
2	0	15	1736	31616	1484	19	31601	30098	1721
5	0	196	7745	31942	2331	9	31746	29406	7549
8	0	587	11717	36450	1393	10	35863	34460	11130
10	0	1056	16977	37163	2298	3	36107	33806	15921
15	0	2043	24575	44637	1142	15	42594	41437	22532
16	0	2053	24621	46072	1613	24	44019	42382	22568
18	0	2289	27912	47463	1984	12	45174	43178	25623
20	0	2394	29172	54903	9735	1	52509	42773	26778
12	0	1442	19719	60589	8143	7	59147	50997	18277
7	0	238	10678	64201	6431	39	63963	57493	10440
14	0	1779	24565	70764	13560	23	68985	55402	22786
0	0	0	0	70764	7	0	70764	70757	0"""

################################################################################

#FeedbackRRScheduler Test0 Output.out
FbT0OUT = """1	3	0	0	83	82	1	83	0	0
2	6	168	168	487	184	15	319	120	0
3	15	199	199	686	332	0	487	155	0
4	5	825	825	929	104	0	104	0	0
7	5	1343	1343	1470	123	4	127	0	0
5	9	929	929	1947	229	2	1018	787	0
10	2	1952	1952	2010	58	0	58	0	0
14	4	2531	2531	2775	84	0	244	160	0
12	7	2374	2374	3095	187	5	721	529	0
18	2	3406	3406	3575	78	11	169	80	0
19	3	3519	3519	3654	80	0	135	55	0
17	5	3373	3373	3689	158	4	316	154	0
20	3	3730	3730	3804	74	0	74	0	0
8	12	1496	1496	3932	303	23	2436	2110	0
9	14	1612	1612	4243	354	8	2631	2269	0
6	18	1018	1018	4610	429	7	3592	3156	0
13	24	2530	2530	5123	519	8	2593	2066	0
16	35	2839	2839	5831	747	31	2992	2214	0
15	38	2692	2692	5931	797	2	3239	2440	0
11	44	2018	2018	6054	903	6	4036	3127	0
0	0	0	0	6054	229	0	6054	5825	0"""

#FeedbackRRScheduler Test1 Output.out
FbT1OUT = """3	5	268	268	316	41	7	48	0	0
1	22	0	0	366	161	0	366	205	0
4	6	383	383	487	52	10	104	42	0
5	16	404	404	689	128	0	285	157	0
8	6	772	772	917	54	0	145	91	0
7	7	718	718	926	56	0	208	152	0
11	7	1144	1144	1262	62	0	118	56	0
13	13	1609	1609	1701	92	0	92	0	0
2	28	115	115	1702	225	20	1587	1342	0
9	28	802	802	1703	205	3	901	693	0
12	32	1151	1151	1788	229	3	637	405	0
14	4	2021	2021	2053	32	0	32	0	0
16	11	2242	2242	2463	81	0	221	140	0
19	4	2543	2543	2574	31	0	31	0	0
20	21	2574	2574	2939	148	0	365	217	0
15	43	2200	2200	3397	315	2	1197	880	0
17	46	2257	2257	3451	339	3	1194	852	0
18	48	2491	2491	3463	347	0	972	625	0
6	82	524	524	3789	599	6	3265	2660	0
10	102	849	849	3933	736	6	3084	2342	0
0	0	0	0	3933	0	0	3933	3933	0"""

#FeedbackRRScheduler Test2 Output.out
FbT2OUT = """19	332	2357	2357	13350	667	0	10993	10326	0
6	462	200	200	18276	928	0	18076	17148	0
15	568	2043	2043	22107	1142	15	20064	18907	0
11	577	1296	1296	22418	1157	0	21122	19965	0
8	693	587	587	26126	1393	10	25539	24136	0
2	739	15	15	27513	1484	19	27498	25995	0
16	805	2053	2053	29353	1613	24	27300	25663	0
3	924	18	18	32457	1851	0	32439	30588	0
18	990	2289	2289	34052	1984	12	31763	29767	0
10	1145	1056	1056	37449	2298	3	36393	34092	0
5	1162	196	196	37795	2331	9	37599	35259	0
1	1178	0	0	38088	2359	4	38088	35725	0
4	1410	169	169	41791	2823	0	41622	38799	0
17	1555	2167	2167	43826	3113	0	41659	38546	0
13	1823	1559	1559	47050	3649	0	45491	41842	0
9	2047	905	905	49294	4096	0	48389	44293	0
7	3210	238	238	58598	6431	39	58360	51890	0
12	4067	1442	1442	63745	8143	7	62303	54153	0
20	4864	2394	2394	66935	9735	1	64541	54805	0
14	6774	1779	1779	70764	13560	23	68985	55402	0
0	0	0	0	70764	7	0	70764	70757	0"""

################################################################################

#IdealSJFScheduler Test0 Output.out
IdealT0OUT = """1	0	0	0	83	82	1	83	0	0
3	0	199	215	547	332	0	348	16	16
2	0	168	168	695	184	15	527	328	0
4	0	825	825	929	104	0	104	0	0
5	0	929	929	1160	229	2	231	0	0
6	0	1018	1160	1621	429	7	603	167	142
7	0	1343	1561	1715	123	4	372	245	218
10	0	1952	1974	2032	58	0	80	22	22
9	0	1612	1814	2401	354	8	789	427	202
8	0	1496	1715	2430	303	23	934	608	219
14	0	2531	2868	2952	84	0	421	337	337
12	0	2374	2430	3099	187	5	725	533	56
11	0	2018	2470	3823	903	6	1805	896	452
20	0	3730	3878	3952	74	0	222	148	148
18	0	3406	3823	3975	78	11	569	480	417
19	0	3519	3975	4055	80	0	536	456	456
13	0	2530	3099	4458	519	8	1928	1401	569
17	0	3373	4055	4513	158	4	1140	978	682
15	0	2692	5213	6041	797	2	3349	2550	2521
16	0	2839	4513	6057	747	31	3218	2440	1674
0	0	0	0	6057	232	0	6057	5825	0"""

#IdealSJFScheduler Test1 Output.out
IdealT1OUT = """1	0	0	0	161	161	0	161	0	0
2	0	115	161	411	225	20	296	51	46
3	0	268	381	444	41	7	176	128	113
4	0	383	411	482	52	10	99	37	28
5	0	404	482	610	128	0	206	78	78
6	0	524	610	1215	599	6	691	86	86
8	0	772	1215	1269	54	0	497	443	443
7	0	718	1269	1325	56	0	607	551	551
11	0	1144	1325	1387	62	0	243	181	181
9	0	802	1387	1817	205	3	1015	807	585
13	0	1609	1817	1909	92	0	300	208	208
12	0	1151	1591	1913	229	3	762	530	440
14	0	2021	2308	2340	32	0	319	287	287
16	0	2242	2374	2455	81	0	213	132	132
19	0	2543	2617	2648	31	0	105	74	74
20	0	2574	2648	2796	148	0	222	74	74
10	0	849	1913	2975	736	6	2126	1384	1064
15	0	2200	2340	3525	315	2	1325	1008	140
18	0	2491	3548	3895	347	0	1404	1057	1057
17	0	2257	2975	3942	339	3	1685	1343	718
0	0	0	0	3942	9	0	3942	3933	0"""

#IdealSJFScheduler Test2 Output.out
IdealT2OUT = """1	0	0	0	3760	2359	4	3760	1397	0
19	0	2357	3760	4427	667	0	2070	1403	1403
6	0	200	4427	5355	928	0	5155	4227	4227
15	0	2043	2320	7490	1142	15	5447	4290	277
11	0	1296	7490	8647	1157	0	7351	6194	6194
8	0	587	8647	11375	1393	10	10788	9385	8060
2	0	15	9811	11524	1484	19	11509	10006	9796
18	0	2289	2544	12915	1984	12	10626	8630	255
16	0	2053	2366	14350	1613	24	12297	10660	313
3	0	18	15935	17786	1851	0	17768	15917	15917
10	0	1056	14350	18499	2298	3	17443	15142	13294
5	0	196	18499	23125	2331	9	22929	20589	18303
4	0	169	23125	25948	2823	0	25779	22956	22956
17	0	2167	28834	31947	3113	0	29780	26667	26667
13	0	1559	35439	39088	3649	0	37529	33880	33880
9	0	905	42590	46686	4096	0	45781	41685	41685
12	0	1442	1736	55648	8143	7	54206	46056	294
7	0	238	5355	62015	6431	39	61777	55307	5117
14	0	1779	2310	63317	13560	23	61538	47955	531
20	0	2394	20504	70757	9735	1	68363	58627	18110
0	0	0	0	70757	0	0	70757	70757	0"""


################################################################################

#RRScheduler Test0 Output.out
RRT0OUT = """1	0	0	0	83	82	1	83	0	0
2	0	168	168	514	184	15	346	147	0
3	0	199	215	686	332	0	487	155	16
4	0	825	825	929	104	0	104	0	0
5	0	929	929	1283	229	2	354	123	0
7	0	1343	1343	1626	123	4	283	156	0
6	0	1018	1026	1991	429	7	973	537	8
10	0	1952	1991	2149	58	0	197	139	39
8	0	1496	1532	2576	303	23	1080	754	36
9	0	1612	1646	3007	354	8	1395	1033	34
14	0	2531	2616	3111	84	0	580	496	85
12	0	2374	2402	3318	187	5	944	752	28
18	0	3406	3498	4073	78	11	667	578	92
19	0	3519	3638	4093	80	0	574	494	119
20	0	3730	3850	4270	74	0	540	466	120
17	0	3373	3438	4465	158	4	1092	930	65
13	0	2530	2596	5205	519	8	2675	2148	66
11	0	2018	2071	5910	903	6	3892	2983	53
16	0	2839	2956	6052	747	31	3213	2435	117
15	0	2692	2776	6054	797	2	3362	2563	84
0	0	0	0	6054	229	0	6054	5825	0"""

#RRScheduler Test1 Output.out
RRT1OUT = """1	0	0	0	197	161	0	197	36	0
3	0	268	274	357	41	7	89	41	6
2	0	115	119	518	225	20	403	158	4
4	0	383	385	521	52	10	138	76	2
5	0	404	413	691	128	0	287	159	9
7	0	718	719	859	56	0	141	85	1
8	0	772	782	976	54	0	204	150	10
11	0	1144	1158	1444	62	0	300	238	14
9	0	802	817	1677	205	3	875	667	15
13	0	1609	1633	2000	92	0	391	299	24
12	0	1151	1172	2138	229	3	987	755	21
14	0	2021	2035	2142	32	0	121	89	14
6	0	524	528	2603	599	6	2079	1474	4
16	0	2242	2261	2698	81	0	456	375	19
19	0	2543	2578	2771	31	0	228	197	35
20	0	2574	2617	3382	148	0	808	660	43
15	0	2200	2212	3717	315	2	1517	1200	12
17	0	2257	2282	3862	339	3	1605	1263	25
10	0	849	873	3908	736	6	3059	2317	24
18	0	2491	2522	3933	347	0	1442	1095	31
0	0	0	0	3933	0	0	3933	3933	0"""

#RRScheduler Test2 Output.out
RRT2OUT = """19	0	2357	2392	15710	667	0	13353	12686	35
6	0	200	208	16550	928	0	16350	15422	8
11	0	1296	1314	23163	1157	0	21867	20710	18
15	0	2043	2070	23913	1142	15	21870	20713	27
2	0	15	16	25312	1484	19	25297	23794	1
8	0	587	600	25673	1393	10	25086	23683	13
3	0	18	20	30465	1851	0	30447	28596	2
16	0	2053	2082	30708	1613	24	28655	27018	29
18	0	2289	2322	35340	1984	12	33051	31055	33
1	0	0	0	36295	2359	4	36295	33932	0
5	0	196	202	36763	2331	9	36567	34227	6
10	0	1056	1072	37498	2298	3	36442	34141	16
4	0	169	174	40716	2823	0	40547	37724	5
17	0	2167	2198	44237	3113	0	42070	38957	31
13	0	1559	1582	47190	3649	0	45631	41982	23
9	0	905	920	49098	4096	0	48193	44097	15
7	0	238	248	58116	6431	39	57878	51408	10
12	0	1442	1462	63651	8143	7	62209	54059	20
20	0	2394	2430	66969	9735	1	64575	54839	36
14	0	1779	1804	70764	13560	23	68985	55402	25
0	0	0	0	70764	7	0	70764	70757	0"""

################################################################################

#SJFScheduler Test0 Output.out
SJFT0OUT = """1	21	0	0	83	82	1	83	0	0
3	10	199	215	547	332	0	348	16	16
2	57	168	168	695	184	15	527	328	0
4	10	825	825	929	104	0	104	0	0
5	22	929	929	1160	229	2	231	0	0
10	10	1952	1977	2035	58	0	83	25	25
7	85	1343	1561	2614	123	4	1271	1144	218
14	10	2531	2833	2917	84	0	386	302	302
20	10	3730	4475	4549	74	0	819	745	745
19	10	3519	4604	4684	80	0	1165	1085	1085
8	84	1496	1590	4713	303	23	3217	2891	94
13	114	2530	2614	5098	519	8	2568	2041	84
12	122	2374	2433	5283	187	5	2909	2717	59
9	75	1612	1689	5354	354	8	3742	3380	77
6	142	1018	1160	5385	429	7	4367	3931	142
18	142	3406	4549	5408	78	11	2002	1913	1143
11	204	2018	2035	5913	903	6	3895	2986	17
17	229	3373	4372	5968	158	4	2595	2433	999
15	382	2692	2917	6041	797	2	3349	2550	225
16	53	2839	3672	6057	747	31	3218	2440	833
0	0	0	0	6057	232	0	6057	5825	0"""

#SJFScheduler Test1 Output.out
SJFT1OUT = """1	10	0	0	161	161	0	161	0	0
5	10	404	417	545	128	0	141	13	13
4	15	383	403	590	52	10	207	145	20
6	8	524	545	1182	599	6	658	53	21
7	10	718	1182	1238	56	0	520	464	464
8	10	772	1238	1292	54	0	520	466	466
11	10	1144	1292	1354	62	0	210	148	148
13	10	1609	2178	2270	92	0	661	569	569
14	10	2021	2270	2302	32	0	281	249	249
16	10	2242	2302	2383	81	0	141	60	60
19	10	2543	2686	2717	31	0	174	143	143
20	10	2574	2717	2865	148	0	291	143	143
18	10	2491	2865	3212	347	0	721	374	374
3	16	268	381	3231	41	7	2963	2915	113
15	86	2200	2652	3512	315	2	1312	995	452
2	95	115	161	3520	225	20	3405	3160	46
9	107	802	1579	3521	205	3	2719	2511	777
12	117	1151	1354	3525	229	3	2374	2142	203
17	54	2257	2383	3757	339	3	1500	1158	126
10	108	849	1783	3936	736	6	3087	2345	934
0	0	0	0	3936	3	0	3936	3933	0"""

#SJFScheduler Test2 Output.out
SJFT2OUT = """13	10	1559	3071	6720	3649	0	5161	1512	1512
3	10	18	9015	10866	1851	0	10848	8997	8997
19	10	2357	10866	11533	667	0	9176	8509	8509
9	10	905	13538	17634	4096	0	16729	12633	12633
17	10	2167	17634	20747	3113	0	18580	15467	15467
6	10	200	23149	24077	928	0	23877	22949	22949
11	10	1296	24077	25234	1157	0	23938	22781	22781
4	10	169	25818	28641	2823	0	28472	25649	25649
15	359	2043	21518	31940	1142	15	29897	28740	19475
2	672	15	1736	35581	1484	19	35566	34063	1721
16	673	2053	21340	37016	1613	24	34963	33326	19287
1	873	0	0	44804	2359	4	44804	42441	0
8	939	587	29680	45033	1393	10	44446	43043	29093
10	972	1056	21564	45746	2298	3	44690	42389	20508
18	1168	2289	20747	47137	1984	12	44848	42852	18458
20	1483	2394	6720	54577	9735	1	52183	42447	4326
5	1744	196	11533	54903	2331	9	54707	52367	11337
12	3066	1442	25234	63088	8143	7	61646	53496	23792
7	2143	238	28641	69455	6431	39	69217	62747	28403
14	3698	1779	25808	70757	13560	23	68978	55395	24029
0	0	0	0	70757	0	0	70757	70757	0"""


################################################################################
# Turning Fcfs data into 2D matrix
#10 processes
FcfsT0matrix = [list(map(int, line.split())) for line in FcfsT0OUT.split("\n")]

#50 processes
FcfsT1matrix = [list(map(int, line.split())) for line in FcfsT1OUT.split("\n")]

#150 processes
FcfsT2matrix = [list(map(int, line.split())) for line in FcfsT2OUT.split("\n")]

################################################################################
# Turning FeedbackRR data into 2D matrix
#10 processes
FbT0matrix = [list(map(int, line.split())) for line in FbT0OUT.split("\n")]

#50 processes
FbT1matrix = [list(map(int, line.split())) for line in FbT1OUT.split("\n")]

#150 processes
FbT2matrix = [list(map(int, line.split())) for line in FbT2OUT.split("\n")]

################################################################################
# Turning IdealSJF data into 2D matrix
#10 processes
IdealT0matrix = [list(map(int, line.split())) for line in IdealT0OUT.split("\n")]

#50 processes
IdealT1matrix = [list(map(int, line.split())) for line in IdealT1OUT.split("\n")]

#150 processes
IdealT2matrix = [list(map(int, line.split())) for line in IdealT2OUT.split("\n")]


################################################################################
# Turning RoundRobiun data into 2D matrix
#10 processes
RRT0matrix = [list(map(int, line.split())) for line in RRT0OUT.split("\n")]

#50 processes
RRT1matrix = [list(map(int, line.split())) for line in RRT1OUT.split("\n")]

#150 processes
RRT2matrix = [list(map(int, line.split())) for line in RRT2OUT.split("\n")]


################################################################################
# Turning Shortest job first data into 2D matrix
#10 processes
SJFT0matrix = [list(map(int, line.split())) for line in SJFT0OUT.split("\n")]

#50 processes
SJFT1matrix = [list(map(int, line.split())) for line in SJFT1OUT.split("\n")]

#150 processes
SJFT2matrix = [list(map(int, line.split())) for line in SJFT2OUT.split("\n")]


def experiment2():
    Fcfsx = [20, 11, 5]
    Fcfsy = []


    CPUTotal = 0

    #cputime - idle cpu time 
    CPUUtilized = 0

    for row in FcfsT0matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    print((CPUUtilized/20)*100)
    Fcfsy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in FcfsT1matrix:
        CPUTotal += row[7]
        if row[0] != 0:
            CPUUtilized += row[7]
    Fcfsy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in FcfsT2matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    Fcfsy.append((CPUUtilized/20)*100)    


################################################################
    FeedbackRRx= [20, 11, 5]
    FeedbackRRy= []


    CPUTotal = 0

    #cputime - idle cpu time 
    CPUUtilized = 0

    for row in FbT0matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    print((CPUUtilized/20)*100)
    FeedbackRRy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in FbT1matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    FeedbackRRy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in FbT2matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    FeedbackRRy.append((CPUUtilized/20)*100) 


################################################################
    IdealSJFx= [20, 11, 5]
    IdealSJFy=[]

    CPUTotal = 0

    #cputime - idle cpu time 
    CPUUtilized = 0

    for row in IdealT0matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    print((CPUUtilized/20)*100)
    IdealSJFy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in IdealT1matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    IdealSJFy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in IdealT2matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    IdealSJFy.append((CPUUtilized/20)*100) 

    ###################################################################
    RRx= [20, 11, 5]
    RRy=[]

    CPUTotal = 0

    #cputime - idle cpu time 
    CPUUtilized = 0

    for row in RRT0matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    print((CPUUtilized/20)*100)
    RRy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in RRT1matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    RRy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in RRT2matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    RRy.append((CPUUtilized/20)*100) 

####################################################################

    SJFx= [20, 11, 5]
    SJFy= []

    CPUTotal = 0

    #cputime - idle cpu time 
    CPUUtilized = 0

    for row in SJFT0matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    print((CPUUtilized/20)*100)
    SJFy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in SJFT1matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    SJFy.append((CPUUtilized/20)*100)


    CPUUtilized = 0
    CPUTotal = 0
    for row in SJFT2matrix:
        CPUTotal += row[5]
        if row[0] != 0:
            CPUUtilized += row[7]
    SJFy.append((CPUUtilized/20)*100) 





    # Create the plot
    #plt.plot(Fcfsx, Fcfsy, label="Fcfs", color='black', marker='o')  
    #plt.plot(FeedbackRRx, FeedbackRRy, label="Feedback", color='r', marker='o')  
    #plt.plot(IdealSJFx, IdealSJFy, label="Ideal", color='y', marker='o')  
    #plt.plot(RRx, RRy, label="RR", color='g', marker='o')  
    plt.plot(SJFx, SJFy, label="SJF", color='b', marker='o')  


    plt.title("Experiment 2")
    plt.xlabel("Time Quantum")
    plt.ylabel("Avg TurnaroundTime")

   
    plt.grid(True)
    plt.legend()
    plt.show()

    ####################################################

experiment2()